The Stream API in Java is a powerful tool introduced in Java 8 for processing collections of data
in a functional and declarative way.
It allows you to perform various operations on a stream of data,
such as filtering, mapping, reducing, and collecting, in a concise and efficient manner.

Here's a detailed explanation of the Stream API with code snippets, implementations, and outputs:

1. Creating a Stream:
   You can create a stream from various data sources like collections, arrays, or I/O channels.
   Here's an example of creating a stream from a list of integers:

2. Filtering:
   You can filter a stream to include only elements that satisfy a given condition
   using the `filter` operation.
   Here's an example of filtering even numbers from a stream:

3. Mapping:
   You can transform elements of a stream using the `map` operation.
   Here's an example of doubling each number in a stream:

4. Reducing:
   You can perform reduction operations on a stream, such as summing or finding the
   maximum/minimum value, using the `reduce` operation.
   Here's an example of summing all the elements in a stream:

5. Collecting:

The collect method is a powerful and versatile terminal operation provided by the Java Stream API.
It is used to accumulate elements of a stream into a data structure such as a list, set, map, or a custom collector.
The collect method takes a Collector as its argument, which defines how the elements of the stream should be collected.
The syntax of the collect method is as follows:
<R> R collect(Collector<? super T, A, R> collector)
Where:

T is the type of the stream elements.
A is the type of the intermediate accumulation result (used during the collection process).
R is the type of the final result (the type of the object that will be returned after the collection is completed).
   You can collect the elements of a stream into a collection or a single value
   using the `collect` operation.
   Here's an example of collecting even numbers into a list:

These are just a few examples of how you can use the Stream API in Java.
The API provides many more operations and functionalities for efficient data processing.
